generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model User {
  id                  String              @id @default(cuid())
  name                String
  email               String              @unique
  emailVerified       DateTime?
  image               String?
  password            String
  phone               String
  bio                 String?
  year                String
  role                Role                @default(USER)
  position            String?
  branchId            String
  totalActivityPoints Int                 @default(0)
  updatedAt           DateTime            @updatedAt
  createdAt           DateTime            @default(now())
  Answer              Answer[]
  Attendence          Attendence[]
  Certificate         Certificate[]
  Organiser           Organiser[]
  RefreshToken        RefreshToken[]
  Branch              Branch              @relation(fields: [branchId], references: [id])
  UserFeedback        UserFeedback[]
  UserLink            UserLink[]
  VerificationToken   VerificationToken[]
  ActivityPoint       ActivityPoint[]     @relation("ActivityPointToUser")
  Team                Team[]              @relation("TeamToUser")
}

model VerificationToken {
  id        String           @id @unique @default(cuid())
  revoked   Boolean          @default(false)
  type      VerificationType @default(EMAIL_VERIFICATION)
  userId    String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  User      User             @relation(fields: [userId], references: [id])
}

model RefreshToken {
  id          String   @id @unique
  hashedToken String
  revoked     Boolean  @default(false)
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model UserLink {
  id        String   @id @default(cuid())
  linkName  String
  url       String
  userId    String?
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id])
}

model Branch {
  id        String   @id @default(cuid())
  name      String
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  User      User[]
}

model ActivityPoint {
  id        String   @id @default(cuid())
  point     Int
  name      String?  @default("Event")
  eventId   String?
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  Event     Event?   @relation(fields: [eventId], references: [id])
  User      User[]   @relation("ActivityPointToUser")
}

model Event {
  id               String             @id @default(cuid())
  name             String
  imgSrc           String?
  deadline         DateTime?
  fromDate         DateTime
  toDate           DateTime
  description      String?
  venue            String?
  type             EventType
  minTeamSize      Int                @default(1)
  maxTeamSize      Int
  maxTeams         Int                @default(0)
  category         EventCategory
  amount           Int                @default(0)
  state            EventState         @default(DRAFT)
  isLegacy         Boolean            @default(false)
  updatedAt        DateTime           @updatedAt
  createdAt        DateTime           @default(now())
  ActivityPoint    ActivityPoint[]
  Attendence       Attendence[]
  Certificate      Certificate[]
  FeedbackTemplate FeedbackTemplate[]
  Organiser        Organiser[]
  Team             Team[]
  Winner           Winner[]
}

model Organiser {
  id        String   @id @default(cuid())
  eventId   String
  userId    String
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  Event     Event    @relation(fields: [eventId], references: [id])
  User      User     @relation(fields: [userId], references: [id])

  @@unique([userId, eventId])
}

model Team {
  id          String   @id @default(cuid())
  name        String
  isConfirmed Boolean  @default(false)
  hasAttended Boolean  @default(false)
  eventId     String
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())
  Event       Event    @relation(fields: [eventId], references: [id])
  Winner      Winner?
  Members     User[]   @relation("TeamToUser")
}

model Attendence {
  id          String   @id @default(cuid())
  hasAttended Boolean  @default(false)
  userId      String
  eventId     String
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())
  Event       Event    @relation(fields: [eventId], references: [id])
  User        User     @relation(fields: [userId], references: [id])
}

model Winner {
  id         String     @id @default(cuid())
  winnerType WinnerType
  eventId    String
  teamId     String     @unique
  updatedAt  DateTime   @updatedAt
  createdAt  DateTime   @default(now())
  Event      Event      @relation(fields: [eventId], references: [id])
  Team       Team       @relation(fields: [teamId], references: [id])

  @@unique([eventId, teamId])
}

model Certificate {
  id              String          @id @default(cuid())
  issuedOn        DateTime
  certificateType CertificateType
  userId          String
  eventId         String
  updatedAt       DateTime        @updatedAt
  createdAt       DateTime        @default(now())
  Event           Event           @relation(fields: [eventId], references: [id])
  User            User            @relation(fields: [userId], references: [id])

  @@unique([eventId, userId])
}

model Question {
  id                 String           @id @default(cuid())
  qs                 String
  answerType         AnswerType
  feedbackTemplateId String
  updatedAt          DateTime         @updatedAt
  createdAt          DateTime         @default(now())
  Answer             Answer[]
  FeedbackTemplate   FeedbackTemplate @relation(fields: [feedbackTemplateId], references: [id])
}

model Answer {
  id                             String        @id @default(cuid())
  ans                            String
  questionId                     String
  userId                         String
  userFeedbackUserId             String?
  userFeedbackFeedbackTemplateId String?
  updatedAt                      DateTime      @updatedAt
  createdAt                      DateTime      @default(now())
  Question                       Question      @relation(fields: [questionId], references: [id])
  UserFeedback                   UserFeedback? @relation(fields: [userFeedbackUserId, userFeedbackFeedbackTemplateId], references: [userId, feedbackTemplateId])
  User                           User          @relation(fields: [userId], references: [id])
}

model FeedbackTemplate {
  id           String         @id @default(cuid())
  eventId      String
  updatedAt    DateTime       @updatedAt
  createdAt    DateTime       @default(now())
  Event        Event          @relation(fields: [eventId], references: [id])
  Questions    Question[]
  UserFeedback UserFeedback[]
}

model UserFeedback {
  userId             String
  feedbackTemplateId String
  updatedAt          DateTime         @updatedAt
  createdAt          DateTime         @default(now())
  Answers            Answer[]
  FeedbackTemplate   FeedbackTemplate @relation(fields: [feedbackTemplateId], references: [id])
  User               User             @relation(fields: [userId], references: [id])

  @@id([userId, feedbackTemplateId])
  @@unique([userId, feedbackTemplateId])
  @@index([userId, feedbackTemplateId])
}

enum Role {
  USER
  MEMBER
  CORE
  ADMIN
}

enum EventType {
  SOLO
  TEAM
}

enum EventCategory {
  WORKSHOP
  COMPETITION
  HACKATHON
  SPECIAL
}

enum EventState {
  DRAFT
  PUBLISHED
  COMPLETED
}

enum WinnerType {
  WINNER
  RUNNER_UP
  SECOND_RUNNER_UP
}

enum CertificateType {
  WINNER
  RUNNER_UP
  SECOND_RUNNER_UP
  PARTICIPATION
}

enum AnswerType {
  BOOLEAN
  RATING
  COMMENT
}

enum VerificationType {
  PASSWORD_RESET
  EMAIL_VERIFICATION
}
