// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
// Authentication
model User {
  id            String    @id @default(cuid())
  name          String
  // College email will allow for verification
  email         String    @unique
  emailVerified DateTime?
  image         String?

  // Manually Added
  password String
  phone    String
  bio      String?
  year     String

  role     Role    @default(USER)
  position String?

  branchId String
  Branch   Branch @relation(fields: [branchId], references: [id])

  UserLink UserLink[]

  totalActivityPoints Int             @default(0)
  ActivityPoint       ActivityPoint[]

  Organiser Organiser[]

  Team Team[]

  Attendence Attendence[]

  Certificate  Certificate[]
  Answer       Answer[]
  UserFeedback UserFeedback[]

  updatedAt         DateTime            @updatedAt()
  createdAt         DateTime            @default(now())
  RefreshToken      RefreshToken[]
  VerificationToken VerificationToken[]
  Payment           Payment[]
}

model VerificationToken {
  id String @id @unique @default(cuid())

  revoked Boolean          @default(false)
  type    VerificationType @default(EMAIL_VERIFICATION)

  userId String
  User   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RefreshToken {
  id          String  @id @unique
  hashedToken String
  revoked     Boolean @default(false)

  userId String
  User   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

// End of NextAuth

// Models

// User related models
model UserLink {
  id       String @id @default(cuid())
  linkName String
  url      String

  userId String?
  User   User?   @relation(fields: [userId], references: [id])

  updatedAt DateTime @updatedAt()
  createdAt DateTime @default(now())
}

model Branch {
  id   String @id @default(cuid())
  name String

  User User[]

  updatedAt DateTime @updatedAt()
  createdAt DateTime @default(now())
}

model ActivityPoint {
  id    String  @id @default(cuid())
  point Int
  name  String? @default("Event")

  eventId String?
  Event   Event?  @relation(fields: [eventId], references: [id])

  User User[]

  updatedAt DateTime @updatedAt()
  createdAt DateTime @default(now())
}

// Event management

model Event {
  id     String  @id @default(cuid())
  name   String
  imgSrc String?

  deadline DateTime?
  fromDate DateTime
  toDate   DateTime

  description String?
  venue       String?

  type        EventType
  minTeamSize Int           @default(1)
  maxTeamSize Int
  maxTeams    Int           @default(0) // 0 means infinity
  category    EventCategory
  amount      Int           @default(0)
  state       EventState    @default(DRAFT)
  isLegacy    Boolean       @default(false)

  ActivityPoint ActivityPoint[]
  Team          Team[]

  Organiser Organiser[]

  Attendence Attendence[]
  Winner     Winner[]

  Certificate Certificate[]

  FeedbackTemplate FeedbackTemplate[]

  updatedAt DateTime @updatedAt()
  createdAt DateTime @default(now())
}

model Organiser {
  id String @id @default(cuid())

  eventId String
  Event   Event  @relation(fields: [eventId], references: [id])

  userId String
  User   User   @relation(fields: [userId], references: [id])

  updatedAt DateTime @updatedAt()
  createdAt DateTime @default(now())

  @@unique([userId, eventId])
}

model Team {
  id          String  @id @default(cuid())
  name        String
  isConfirmed Boolean @default(false)
  hasAttended Boolean @default(false)

  Members User[]

  eventId String
  Event   Event  @relation(fields: [eventId], references: [id])

  Winner Winner?

  updatedAt DateTime @updatedAt()
  createdAt DateTime @default(now())
}

model Attendence {
  id          String  @id @default(cuid())
  hasAttended Boolean @default(false)

  userId String
  User   User   @relation(fields: [userId], references: [id])

  eventId String
  Event   Event  @relation(fields: [eventId], references: [id])

  updatedAt DateTime @updatedAt()
  createdAt DateTime @default(now())
}

model Winner {
  id         String     @id @default(cuid())
  winnerType WinnerType

  eventId String
  Event   Event  @relation(fields: [eventId], references: [id])

  teamId String @unique
  Team   Team   @relation(fields: [teamId], references: [id])

  updatedAt DateTime @updatedAt()
  createdAt DateTime @default(now())

  @@unique([eventId, teamId])
}

model Certificate {
  id              String          @id @default(cuid())
  issuedOn        DateTime
  certificateType CertificateType

  userId String
  User   User   @relation(fields: [userId], references: [id])

  eventId String
  Event   Event  @relation(fields: [eventId], references: [id])

  updatedAt DateTime @updatedAt()
  createdAt DateTime @default(now())

  @@unique([eventId, userId])
}

model Question {
  id         String     @id @default(cuid())
  qs         String
  answerType AnswerType

  Answer Answer[]

  feedbackTemplateId String
  FeedbackTemplate   FeedbackTemplate @relation(fields: [feedbackTemplateId], references: [id])

  updatedAt DateTime @updatedAt()
  createdAt DateTime @default(now())
}

model Answer {
  id  String @id @default(cuid())
  ans String

  questionId String
  Question   Question @relation(fields: [questionId], references: [id])

  userId String
  User   User   @relation(fields: [userId], references: [id])

  userFeedbackUserId             String?
  userFeedbackFeedbackTemplateId String?
  UserFeedback                   UserFeedback? @relation(fields: [userFeedbackUserId, userFeedbackFeedbackTemplateId], references: [userId, feedbackTemplateId])

  updatedAt DateTime @updatedAt()
  createdAt DateTime @default(now())
}

model FeedbackTemplate {
  id String @id @default(cuid())

  eventId String
  Event   Event  @relation(fields: [eventId], references: [id])

  Questions Question[]

  UserFeedback UserFeedback[]

  updatedAt DateTime @updatedAt()
  createdAt DateTime @default(now())
}

model UserFeedback {
  userId String
  User   User   @relation(fields: [userId], references: [id])

  feedbackTemplateId String
  FeedbackTemplate   FeedbackTemplate @relation(fields: [feedbackTemplateId], references: [id])

  Answers Answer[]

  updatedAt DateTime @updatedAt()
  createdAt DateTime @default(now())

  @@id([userId, feedbackTemplateId])
  @@unique([userId, feedbackTemplateId])
  @@index([userId, feedbackTemplateId])
}

model Payment {
  id     String @id @default(cuid())
  userId String
  User   User   @relation(fields: [userId], references: [id])
  paymentName String
  razorpayPaymentId String
  razorpayOrderId  String
  razorpaySignature String
  createdAt DateTime @default(now())

  @@unique([userId,razorpayPaymentId])
}

// Enumerations
enum Role {
  USER
  MEMBER
  CORE
  ADMIN
}

enum EventType {
  SOLO
  TEAM
}

enum EventCategory {
  // TODO: add more
  WORKSHOP
  COMPETITION
  HACKATHON
  SPECIAL
}

enum EventState {
  DRAFT
  PUBLISHED
  COMPLETED
}

enum WinnerType {
  WINNER
  RUNNER_UP
  SECOND_RUNNER_UP
}

enum CertificateType {
  WINNER
  RUNNER_UP
  SECOND_RUNNER_UP
  PARTICIPATION
}

enum AnswerType {
  BOOLEAN
  RATING
  COMMENT
}

enum VerificationType {
  PASSWORD_RESET
  EMAIL_VERIFICATION
}
